# type_combinator_simple
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'vehicle'

module TestComponent
  # Car Model.
  class Car < TestComponent::BaseModelTypeComb
    # Represents a model field
    # @return [TrueClass|FalseClass]
    attr_accessor :have_trunk

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['have_trunk'] = 'HaveTrunk'
      @_hash = super().merge(@_hash)
      @_hash
    end

    # A mapping from model property names to types.
    def self.types
      @_types = {} if @_types.nil?
      @_types['have_trunk'] = 'TrueClass|FalseClass'
      @_types = super().merge(@_types)
      @_types
    end

    # An array for optional fields
    def self.optionals
      _arr = []
      (_arr << super()).flatten!
    end

    # An array for nullable fields
    def self.nullables
      _arr = []
      (_arr << super()).flatten!
    end

    def initialize(have_trunk = nil,
                   number_of_tyres = nil)
      @have_trunk = have_trunk

      # Call the constructor of the base class
      super(number_of_tyres)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      names.each do |key, value|
        has_default_value = false
        if !((hash.key? value) || (optionals.include? key)) && !has_default_value
          raise ArgumentError,
                "#{value} is not present in the provided hash"
        end
      end

      # Extract variables from the hash.
      have_trunk = hash.key?('HaveTrunk') ? hash['HaveTrunk'] : nil
      number_of_tyres = hash.key?('NumberOfTyres') ? hash['NumberOfTyres'] : nil

      # Create object from extracted values.
      Car.new(have_trunk,
              number_of_tyres)
    end
  end
end
