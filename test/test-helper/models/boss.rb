# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
require_relative 'employee'

module TestComponent
  # Testing circular reference.
  class Boss < Employee
    # Represents a model field
    # @return [DateTime]
    attr_accessor :promoted_at

    # Represents a model field
    # @return [Employee]
    attr_accessor :assistant

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['promoted_at'] = 'promotedAt'
      @_hash['assistant'] = 'assistant'
      @_hash = super().merge(@_hash)
      @_hash
    end

    # An array for optional fields
    def self.optionals
      _arr = []
      (_arr << super()).flatten!
    end

    # An array for nullable fields
    def self.nullables
      _arr = %w[
        assistant
      ]
      (_arr << super()).flatten!
    end

    def initialize(address = nil,
                   age = nil,
                   assistant = nil,
                   birthday = nil,
                   birthtime = nil,
                   boss = nil,
                   department = nil,
                   dependents = nil,
                   hired_at = nil,
                   joining_day = Days::MONDAY,
                   name = nil,
                   promoted_at = nil,
                   salary = nil,
                   uid = nil,
                   working_days = nil,
                   person_type = 'Boss',
                   additional_properties = {})
      @promoted_at = promoted_at
      @assistant = assistant

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      # Call the constructor of the base class
      super(address,
            age,
            birthday,
            birthtime,
            boss,
            department,
            dependents,
            hired_at,
            joining_day,
            name,
            salary,
            uid,
            working_days,
            person_type)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      address = hash.key?('address') ? hash['address'] : nil
      age = hash.key?('age') ? hash['age'] : nil
      assistant = Employee.from_hash(hash['assistant']) if hash['assistant']
      birthday = hash.key?('birthday') ? hash['birthday'] : nil
      birthtime = if hash.key?('birthtime')
                    (DateTimeHelper.from_rfc3339(hash['birthtime']) if hash['birthtime'])
                  end
      boss = Person.from_hash(hash['boss']) if hash['boss']
      department = hash.key?('department') ? hash['department'] : nil
      # Parameter is an array, so we need to iterate through it
      dependents = nil
      unless hash['dependents'].nil?
        dependents = []
        hash['dependents'].each do |structure|
          dependents << (Person.from_hash(structure) if structure)
        end
      end

      dependents = nil unless hash.key?('dependents')
      hired_at = if hash.key?('hiredAt')
                   (DateTimeHelper.from_rfc1123(hash['hiredAt']) if hash['hiredAt'])
                 end
      joining_day = hash['joiningDay'] ||= Days::MONDAY
      name = hash.key?('name') ? hash['name'] : nil
      promoted_at = if hash.key?('promotedAt')
                      (DateTimeHelper.from_unix(hash['promotedAt']) if hash['promotedAt'])
                    end
      salary = hash.key?('salary') ? hash['salary'] : nil
      uid = hash.key?('uid') ? hash['uid'] : nil
      working_days = hash.key?('workingDays') ? hash['workingDays'] : nil
      person_type = hash['personType'] ||= 'Boss'

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Boss.new(address,
               age,
               assistant,
               birthday,
               birthtime,
               boss,
               department,
               dependents,
               hired_at,
               joining_day,
               name,
               promoted_at,
               salary,
               uid,
               working_days,
               person_type,
               hash)
    end

    def to_promoted_at
      DateTimeHelper.to_unix(promoted_at)
    end
  end
end
